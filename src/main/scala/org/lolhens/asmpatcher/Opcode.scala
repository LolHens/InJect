package org.lolhens.asmpatcher

import java.util
import org.lolhens.asmpatcher.Opcode._
import org.objectweb.asm.Opcodes
import org.objectweb.asm.tree.AbstractInsnNode
import scala.collection.JavaConversions._

/**
 * Created by LolHens on 14.12.2014.
 */
class Opcode(val name: String,
             val opcode: Int,
             val optype: Int) {
  opcodes += name -> this

  override def toString = name
}

object Opcode {
  val opcodes = new util.HashMap[String, Opcode]()

  /* derived from ClassWriter with AbstractInsnNode Constants
  "AAAAAAAAAAAAAAAABBJ__CCCCC____________________AAAAAAAACC"
  "CCC____________________AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  "AAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHHHHHHCLMAA"
  "AAAAEEEEFFFFGDBDAADDAA_NHH"
  */
  val NOP = new Opcode("nop", Opcodes.NOP, AbstractInsnNode.INSN)
  val ACONST_NULL = new Opcode("aconst_null", Opcodes.ACONST_NULL, AbstractInsnNode.INSN)
  val ICONST_M1 = new Opcode("iconst_m1", 2, AbstractInsnNode.INSN)
  val ICONST_0 = new Opcode("iconst_0", 3, AbstractInsnNode.INSN)
  val ICONST_1 = new Opcode("iconst_1", 4, AbstractInsnNode.INSN)
  val ICONST_2 = new Opcode("iconst_2", 5, AbstractInsnNode.INSN)
  val ICONST_3 = new Opcode("iconst_3", 6, AbstractInsnNode.INSN)
  val ICONST_4 = new Opcode("iconst_4", 7, AbstractInsnNode.INSN)
  val ICONST_5 = new Opcode("iconst_5", 8, AbstractInsnNode.INSN)
  val LCONST_0 = new Opcode("lconst_0", 9, AbstractInsnNode.INSN)
  val LCONST_1 = new Opcode("lconst_1", 10, AbstractInsnNode.INSN)
  val FCONST_0 = new Opcode("fconst_0", 11, AbstractInsnNode.INSN)
  val FCONST_1 = new Opcode("fconst_1", 12, AbstractInsnNode.INSN)
  val FCONST_2 = new Opcode("fconst_2", 13, AbstractInsnNode.INSN)
  val DCONST_0 = new Opcode("dconst_0", 14, AbstractInsnNode.INSN)
  val DCONST_1 = new Opcode("dconst_1", 15, AbstractInsnNode.INSN)
  val BIPUSH = new Opcode("bipush", 16, AbstractInsnNode.INT_INSN)
  val SIPUSH = new Opcode("sipush", 17, AbstractInsnNode.INT_INSN)
  val LDC = new Opcode("ldc", 18, AbstractInsnNode.LDC_INSN)
  //val LDC_W = new Opcode("ldc_w", 19)
  //val LDC2_W = new Opcode("ldc2_w", 20)
  val ILOAD = new Opcode("iload", 21, AbstractInsnNode.VAR_INSN)
  val LLOAD = new Opcode("lload", 22, AbstractInsnNode.VAR_INSN)
  val FLOAD = new Opcode("fload", 23, AbstractInsnNode.VAR_INSN)
  val DLOAD = new Opcode("dload", 24, AbstractInsnNode.VAR_INSN)
  val ALOAD = new Opcode("aload", 25, AbstractInsnNode.VAR_INSN)
  //val ILOAD_0 = new Opcode("iload_0", 26)
  //val ILOAD_1 = new Opcode("iload_1", 27)
  //val ILOAD_2 = new Opcode("iload_2", 28)
  //val ILOAD_3 = new Opcode("iload_3", 29)
  //val LLOAD_0 = new Opcode("lload_0", 30)
  //val LLOAD_1 = new Opcode("lload_1", 31)
  //val LLOAD_2 = new Opcode("lload_2", 32)
  //val LLOAD_3 = new Opcode("lload_3", 33)
  //val FLOAD_0 = new Opcode("fload_0", 34)
  //val FLOAD_1 = new Opcode("fload_1", 35)
  //val FLOAD_2 = new Opcode("fload_2", 36)
  //val FLOAD_3 = new Opcode("fload_3", 37)
  //val DLOAD_0 = new Opcode("dload_0", 38)
  //val DLOAD_1 = new Opcode("dload_1", 39)
  //val DLOAD_2 = new Opcode("dload_2", 40)
  //val DLOAD_3 = new Opcode("dload_3", 41)
  //val ALOAD_0 = new Opcode("aload_0", 42)
  //val ALOAD_1 = new Opcode("aload_1", 43)
  //val ALOAD_2 = new Opcode("aload_2", 44)
  //val ALOAD_3 = new Opcode("aload_3", 45)
  val IALOAD = new Opcode("iaload", 46, AbstractInsnNode.INSN)
  val LALOAD = new Opcode("laload", 47, AbstractInsnNode.INSN)
  val FALOAD = new Opcode("faload", 48, AbstractInsnNode.INSN)
  val DALOAD = new Opcode("daload", 49, AbstractInsnNode.INSN)
  val AALOAD = new Opcode("aaload", 50, AbstractInsnNode.INSN)
  val BALOAD = new Opcode("baload", 51, AbstractInsnNode.INSN)
  val CALOAD = new Opcode("caload", 52, AbstractInsnNode.INSN)
  val SALOAD = new Opcode("saload", 53, AbstractInsnNode.INSN)
  val ISTORE = new Opcode("istore", 54, AbstractInsnNode.VAR_INSN)
  val LSTORE = new Opcode("lstore", 55, AbstractInsnNode.VAR_INSN)
  val FSTORE = new Opcode("fstore", 56, AbstractInsnNode.VAR_INSN)
  val DSTORE = new Opcode("dstore", 57, AbstractInsnNode.VAR_INSN)
  val ASTORE = new Opcode("astore", 58, AbstractInsnNode.VAR_INSN)
  //val ISTORE_0 = new Opcode("istore_0", 59)
  //val ISTORE_1 = new Opcode("istore_1", 60)
  //val ISTORE_2 = new Opcode("istore_2", 61)
  //val ISTORE_3 = new Opcode("istore_3", 62)
  //val LSTORE_0 = new Opcode("lstore_0", 63)
  //val LSTORE_1 = new Opcode("lstore_1", 64)
  //val LSTORE_2 = new Opcode("lstore_2", 65)
  //val LSTORE_3 = new Opcode("lstore_3", 66)
  //val FSTORE_0 = new Opcode("fstore_0", 67)
  //val FSTORE_1 = new Opcode("fstore_1", 68)
  //val FSTORE_2 = new Opcode("fstore_2", 69)
  //val FSTORE_3 = new Opcode("fstore_3", 70)
  //val DSTORE_0 = new Opcode("dstore_0", 71)
  //val DSTORE_1 = new Opcode("dstore_1", 72)
  //val DSTORE_2 = new Opcode("dstore_2", 73)
  //val DSTORE_3 = new Opcode("dstore_3", 74)
  //val ASTORE_0 = new Opcode("astore_0", 75)
  //val ASTORE_1 = new Opcode("astore_1", 76)
  //val ASTORE_2 = new Opcode("astore_2", 77)
  //val ASTORE_3 = new Opcode("astore_3", 78)
  val IASTORE = new Opcode("iastore", 79, AbstractInsnNode.INSN)
  val LASTORE = new Opcode("lastore", 80, AbstractInsnNode.INSN)
  val FASTORE = new Opcode("fastore", 81, AbstractInsnNode.INSN)
  val DASTORE = new Opcode("dastore", 82, AbstractInsnNode.INSN)
  val AASTORE = new Opcode("aastore", 83, AbstractInsnNode.INSN)
  val BASTORE = new Opcode("bastore", 84, AbstractInsnNode.INSN)
  val CASTORE = new Opcode("castore", 85, AbstractInsnNode.INSN)
  val SASTORE = new Opcode("sastore", 86, AbstractInsnNode.INSN)
  val POP = new Opcode("pop", 87, AbstractInsnNode.INSN)
  val POP2 = new Opcode("pop2", 88, AbstractInsnNode.INSN)
  val DUP = new Opcode("dup", 89, AbstractInsnNode.INSN)
  val DUP_X1 = new Opcode("dup_x1", 90, AbstractInsnNode.INSN)
  val DUP_X2 = new Opcode("dup_x2", 91, AbstractInsnNode.INSN)
  val DUP2 = new Opcode("dup2", 92, AbstractInsnNode.INSN)
  val DUP2_X1 = new Opcode("dup2_x1", 93, AbstractInsnNode.INSN)
  val DUP2_X2 = new Opcode("dup2_x2", 94, AbstractInsnNode.INSN)
  val SWAP = new Opcode("swap", 95, AbstractInsnNode.INSN)
  val IADD = new Opcode("iadd", 96, AbstractInsnNode.INSN)
  val LADD = new Opcode("ladd", 97, AbstractInsnNode.INSN)
  val FADD = new Opcode("fadd", 98, AbstractInsnNode.INSN)
  val DADD = new Opcode("dadd", 99, AbstractInsnNode.INSN)
  val ISUB = new Opcode("isub", 100, AbstractInsnNode.INSN)
  val LSUB = new Opcode("lsub", 101, AbstractInsnNode.INSN)
  val FSUB = new Opcode("fsub", 102, AbstractInsnNode.INSN)
  val DSUB = new Opcode("dsub", 103, AbstractInsnNode.INSN)
  val IMUL = new Opcode("imul", 104, AbstractInsnNode.INSN)
  val LMUL = new Opcode("lmul", 105, AbstractInsnNode.INSN)
  val FMUL = new Opcode("fmul", 106, AbstractInsnNode.INSN)
  val DMUL = new Opcode("dmul", 107, AbstractInsnNode.INSN)
  val IDIV = new Opcode("idiv", 108, AbstractInsnNode.INSN)
  val LDIV = new Opcode("ldiv", 109, AbstractInsnNode.INSN)
  val FDIV = new Opcode("fdiv", 110, AbstractInsnNode.INSN)
  val DDIV = new Opcode("ddiv", 111, AbstractInsnNode.INSN)
  val IREM = new Opcode("irem", 112, AbstractInsnNode.INSN)
  val LREM = new Opcode("lrem", 113, AbstractInsnNode.INSN)
  val FREM = new Opcode("frem", 114, AbstractInsnNode.INSN)
  val DREM = new Opcode("drem", 115, AbstractInsnNode.INSN)
  val INEG = new Opcode("ineg", 116, AbstractInsnNode.INSN)
  val LNEG = new Opcode("lneg", 117, AbstractInsnNode.INSN)
  val FNEG = new Opcode("fneg", 118, AbstractInsnNode.INSN)
  val DNEG = new Opcode("dneg", 119, AbstractInsnNode.INSN)
  val ISHL = new Opcode("ishl", 120, AbstractInsnNode.INSN)
  val LSHL = new Opcode("lshl", 121, AbstractInsnNode.INSN)
  val ISHR = new Opcode("ishr", 122, AbstractInsnNode.INSN)
  val LSHR = new Opcode("lshr", 123, AbstractInsnNode.INSN)
  val IUSHR = new Opcode("iushr", 124, AbstractInsnNode.INSN)
  val LUSHR = new Opcode("lushr", 125, AbstractInsnNode.INSN)
  val IAND = new Opcode("iand", 126, AbstractInsnNode.INSN)
  val LAND = new Opcode("land", 127, AbstractInsnNode.INSN)
  val IOR = new Opcode("ior", 128, AbstractInsnNode.INSN)
  val LOR = new Opcode("lor", 129, AbstractInsnNode.INSN)
  val IXOR = new Opcode("ixor", 130, AbstractInsnNode.INSN)
  val LXOR = new Opcode("lxor", 131, AbstractInsnNode.INSN)
  val IINC = new Opcode("iinc", 132, AbstractInsnNode.IINC_INSN)
  val I2L = new Opcode("i2l", 133, AbstractInsnNode.INSN)
  val I2F = new Opcode("i2f", 134, AbstractInsnNode.INSN)
  val I2D = new Opcode("i2d", 135, AbstractInsnNode.INSN)
  val L2I = new Opcode("l2i", 136, AbstractInsnNode.INSN)
  val L2F = new Opcode("l2f", 137, AbstractInsnNode.INSN)
  val L2D = new Opcode("l2d", 138, AbstractInsnNode.INSN)
  val F2I = new Opcode("f2i", 139, AbstractInsnNode.INSN)
  val F2L = new Opcode("f2l", 140, AbstractInsnNode.INSN)
  val F2D = new Opcode("f2d", 141, AbstractInsnNode.INSN)
  val D2I = new Opcode("d2i", 142, AbstractInsnNode.INSN)
  val D2L = new Opcode("d2l", 143, AbstractInsnNode.INSN)
  val D2F = new Opcode("d2f", 144, AbstractInsnNode.INSN)
  val I2B = new Opcode("i2b", 145, AbstractInsnNode.INSN)
  val I2C = new Opcode("i2c", 146, AbstractInsnNode.INSN)
  val I2S = new Opcode("i2s", 147, AbstractInsnNode.INSN)
  val LCMP = new Opcode("lcmp", 148, AbstractInsnNode.INSN)
  val FCMPL = new Opcode("fcmpl", 149, AbstractInsnNode.INSN)
  val FCMPG = new Opcode("fcmpg", 150, AbstractInsnNode.INSN)
  val DCMPL = new Opcode("dcmpl", 151, AbstractInsnNode.INSN)
  val DCMPG = new Opcode("dcmpg", 152, AbstractInsnNode.INSN)
  val IFEQ = new Opcode("ifeq", 153, AbstractInsnNode.JUMP_INSN)
  val IFNE = new Opcode("ifne", 154, AbstractInsnNode.JUMP_INSN)
  val IFLT = new Opcode("iflt", 155, AbstractInsnNode.JUMP_INSN)
  val IFGE = new Opcode("ifge", 156, AbstractInsnNode.JUMP_INSN)
  val IFGT = new Opcode("ifgt", 157, AbstractInsnNode.JUMP_INSN)
  val IFLE = new Opcode("ifle", 158, AbstractInsnNode.JUMP_INSN)
  val IF_ICMPQ = new Opcode("if_icmpeq", 159, AbstractInsnNode.JUMP_INSN)
  val IF_AMPNE = new Opcode("if_acmpne", 160, AbstractInsnNode.JUMP_INSN)
  val IF_ICMPLT = new Opcode("if_icmplt", 161, AbstractInsnNode.JUMP_INSN)
  val IF_CMPGE = new Opcode("if_icmpge", 162, AbstractInsnNode.JUMP_INSN)
  val IF_ICMPGT = new Opcode("if_icmpgt", 163, AbstractInsnNode.JUMP_INSN)
  val IF_ICMPLE = new Opcode("if_icmple", 164, AbstractInsnNode.JUMP_INSN)
  val IF_ACMPEQ = new Opcode("if_acmpeq", 165, AbstractInsnNode.JUMP_INSN)
  val IF_ACMPNE = new Opcode("if_acmpne", 166, AbstractInsnNode.JUMP_INSN)
  val GOTO = new Opcode("goto", 167, AbstractInsnNode.JUMP_INSN)
  val JSR = new Opcode("jsr", 168, AbstractInsnNode.JUMP_INSN)
  val RET = new Opcode("ret", 169, AbstractInsnNode.VAR_INSN)
  val TABLESWITCH = new Opcode("tableswitch", 170, AbstractInsnNode.TABLESWITCH_INSN)
  val LOOKUPSWITCH = new Opcode("lookupswitch", 171, AbstractInsnNode.LOOKUPSWITCH_INSN)
  val IRETURN = new Opcode("ireturn", 172, AbstractInsnNode.INSN)
  val LRETURN = new Opcode("lreturn", 173, AbstractInsnNode.INSN)
  val FRETURN = new Opcode("freturn", 174, AbstractInsnNode.INSN)
  val DRETURN = new Opcode("dreturn", 175, AbstractInsnNode.INSN)
  val ARETURN = new Opcode("areturn", 176, AbstractInsnNode.INSN)
  val RETURN = new Opcode("return", 177, AbstractInsnNode.INSN)
  val GETSTATIC = new Opcode("getstatic", 178, AbstractInsnNode.FIELD_INSN)
  val PUTSTATIC = new Opcode("putstatic", 179, AbstractInsnNode.FIELD_INSN)
  val GETFIELD = new Opcode("getfield", 180, AbstractInsnNode.FIELD_INSN)
  val PUTFIELD = new Opcode("putfield", 181, AbstractInsnNode.FIELD_INSN)
  val INVOKEVIRTUAL = new Opcode("invokevirtual", 182, AbstractInsnNode.METHOD_INSN)
  val INVOKESPECIAL = new Opcode("invokespecial", 183, AbstractInsnNode.METHOD_INSN)
  val INVOKESTATIC = new Opcode("invokestatic", 184, AbstractInsnNode.METHOD_INSN)
  val INVOKEINTERFACE = new Opcode("invokeinterface", 185, AbstractInsnNode.METHOD_INSN)
  val INVOKEDYNAMIC = new Opcode("invokedynamic", 186, AbstractInsnNode.INVOKE_DYNAMIC_INSN)
  val NEW = new Opcode("new", 187, AbstractInsnNode.TYPE_INSN)
  val NEWARRAY = new Opcode("newarray", 188, AbstractInsnNode.INT_INSN)
  val ANEWARRAY = new Opcode("anewarray", 189, AbstractInsnNode.TYPE_INSN)
  val ARRAYLENGTH = new Opcode("arraylength", 190, AbstractInsnNode.INSN)
  val ATHROW = new Opcode("athrow", 191, AbstractInsnNode.INSN)
  val CHECKCAST = new Opcode("checkcast", 192, AbstractInsnNode.TYPE_INSN)
  val INSTANCEOF = new Opcode("instanceof", 193, AbstractInsnNode.TYPE_INSN)
  val MONITORENTER = new Opcode("monitorenter", 194, AbstractInsnNode.INSN)
  val MONITOREXIT = new Opcode("monitorexit", 195, AbstractInsnNode.INSN)
  //val WIDE = new Opcode("wide", 196)
  val MULTIANEWARRAY = new Opcode("multianewarray", 197, AbstractInsnNode.MULTIANEWARRAY_INSN)
  val IFNULL = new Opcode("ifnull", 198, AbstractInsnNode.JUMP_INSN)
  val IFNONNULL = new Opcode("ifnonnull", 199, AbstractInsnNode.JUMP_INSN)
  //val GOTO_W = new Opcode("goto_w", 200)
  //val JSR_W = new Opcode("jsr_w", 201)
  //val BREAKPOINT = new Opcode("breakpoint", 202)
  //val IMPDEP1 = new Opcode("impdep1", 254)
  //val IMPDEP2 = new Opcode("impdep2", 255)
}
